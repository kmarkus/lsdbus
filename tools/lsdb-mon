#!/usr/bin/lua

local u = require("utils")
local ac = require("ansicolors")
local lsdb = require("lsdbus.core")

local b, bus, verbose

local function printf(fmt, ...) print(string.format(fmt, ...)) end
local function log(...) if verbose then printf(...) end end
local function _n(x) if x=="" then return nil else return x end end

local function exit(_, sig)
   log("caught %s, exiting", sig)
   b:exit_loop()
end

local function pp(_, s, p, i, m, ...)
   u.pp(s, p, i, m, u.tab2str({...}))
   return 0
end

local function colorpp(_, s, p, i, m, ...)
   u.pp(ac.blue(s), ac.green(p), ac.cyan(i), ac.yellow(m), ac.magenta(u.tab2str({...})))
end

local function help()
   print([=[
usage: lsdb-mon: COMMAND [ARGS] [FLAGS]

without any args just dump all signals
 sig      SENDER,PATH,INTERFACE,MEMBER (empty entries are allowed)
 expr     MATCH-EXPRESSION [MATCH_EXPRESSION ...]
 help     print this

global flags
 -s 	system bus
 -u	session bus
 -c 	colorize output
 -v     verbose
]=])
end

local opttab = u.proc_args(arg)
local cmd = opttab[0][1]

verbose = opttab['-v']
if opttab['-c'] then pp = colorpp end
if opttab['-h'] then cmd = 'help' end
if opttab['-s'] then bus='default_system'
elseif opttab['-u'] then bus='default_user' end

log("using %s bus", bus or 'default')
b = lsdb.open(bus)

if not cmd then
   log('matching all signals')
   b:match_signal(nil, nil, nil, nil, pp)
elseif cmd == 'sig' then
   local s,p,i,m = string.match(opttab[0][2], "([^,]*),([^,]*),([^,]*),(.*)")
   if s == nil then printf("invalid signal spec"); os.exit(1) end
   log("matching sender=%s, path=%s, interf=%s, member=%s", s, p, i, m)
   b:match_signal(_n(s), _n(p), _n(i), _n(m), pp)
elseif cmd == 'expr' then
   log("matching expression %s", opttab[0][2])
   for i=2,#opttab[0] do
      b:match(opttab[0][i],
	      function(...)
		 io.write("expr #"..(i-1)..": ")
		 pp(...)
	      end
      )
   end
elseif cmd == 'help' then
   help()
   os.exit()
else
   printf("unknown command %s", cmd)
   os.exit(1)
end

b:add_signal(lsdb.SIGINT, exit)
b:loop()
