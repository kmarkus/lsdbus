#!/usr/bin/lua

local u = require("utils")
local lsdb = require("lsdbus")
local ac = require("ansicolors")
local ts = tostring

local b, bus, color, verbose

local function printf(fmt, ...) print(string.format(fmt, ...)) end
local function log(...) if verbose then printf(...) end end

local function make_colorize(colorize)
   return function(s) if color then return colorize(s) else return ts(s) end end
end

local blue     = make_colorize(ac.blue)
local red      = make_colorize(ac.red)
local green    = make_colorize(ac.green)
local cyan     = make_colorize(ac.cyan)
local yellow   = make_colorize(ac.yellow)

local function fmtkey(k) return blue(k) end

local function fmtval(k)
   if type(k) == "boolean" then
      return k and green(k) or red(k)
   elseif type(k) == "number" then
      return cyan(k)
   elseif type(k) == "string" then
      return yellow('"'..k..'"')
   else
      return ts(k)
   end
end

local function pp_props(t, ind)
   local keys, maxk = {}, 0
   ind = ind or ""
   for k in pairs(t) do keys[#keys+1], maxk = k, math.max(maxk, #ts(k)) end
   table.sort(keys)
   for _, k in ipairs(keys) do
      local v = t[k]
      if type(v) == 'table' then
	 if #v == 0 then
	    print(ind .. fmtkey(k) .. ' = []')
	 else
	    print(ind .. fmtkey(k) .. ' = ['.. string.rep(" ", maxk - #ts(k)))
	    pp_props(v, ind .. "  ")
	    print(ind .. ']')
	 end
      else
	 print(ind .. fmtkey(k) .. ' = ' .. string.rep(" ", maxk - #ts(k)) .. fmtval(v))
      end
   end
end

local function help()
   printf([=[
usage: lsdb-prop DEST,PATH[,INTERFACE] [PROP[=VALUE]] [FLAGS]

flags
 -e     automatically encode variants
 -r     do not automatically decode variants
 -s     system bus
 -u     session bus
 -c     colorize output
 -v     verbose

*examples*

# show all properties of interfaces
$ lsdb-prop foo.bar,/,com.foo.bar

# get a specific property
$ lsdb-prop foo.bar,/,com.foo.bar PropX

# set a property
$ lsdb-prop foo.bar,/,com.foo.bar PropX=42

]=])
end

-- parse command line arguments
local opttab = u.proc_args(arg)
verbose = opttab['-v']
if opttab['-c'] then color = true end
if opttab['-h'] then help(); os.exit(0) end
if opttab['-s'] then bus = 'default_system'
elseif opttab['-u'] then bus = 'default_user' end

if not opttab[0] or not opttab[0][1] then
   printf("missing argument")
   os.exit(1)
end

log("using %s bus", bus or 'default')
b = lsdb.open(bus)

local s, p, i = string.match(opttab[0][1], "([^,]*),?([^,]*),?(.*)")

if not s or s == "" then
   printf("invalid destination spec")
   os.exit(1)
end

local arg2 = opttab[0][2]
local prxy = lsdb.proxy.new(b, s, p, i)

if not arg2 then
   -- No property specified: list all
   local props = prxy:GetAll()
   require("utils").pp(props)
   pp_props(props)
else
   local key, value = string.match(arg2, "([^=]+)=?(.*)")
   if value == "" then
      -- Getter
      if not prxy:HasProperty(key) then
	 printf("no property %s", key)
	 os.exit(1)
      end
      u.pp(prxy[key])
   else
      -- Setter
      local ok, val = u.eval_sandbox("return " .. value)
      if not ok then
	 printf("failed to parse value: %s", val)
	 os.exit(1)
      end
      prxy[key] = val
   end
end
